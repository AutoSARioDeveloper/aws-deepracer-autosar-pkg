///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : navigation.cpp
/// SOFTWARE COMPONENT NAME           : Navigation
/// GENERATED DATE                    : 2024-11-22 14:30:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "navigation/aa/navigation.h"
 
namespace navigation
{
namespace aa
{
 
Navigation::Navigation()
    : m_logger(ara::log::CreateLogger("NAVI", "SWC", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_workers(2)
{
}
 
Navigation::~Navigation()
{
}
 
bool Navigation::Initialize()
{
    m_logger.LogVerbose() << "Navigation::Initialize";
    
    bool init = true;
    
    m_PPortNavigation = std::make_unique<navigation::aa::port::PPortNavigation>();
    m_RPortInference = std::make_unique<navigation::aa::port::RPortInference>();
    
    // put your code for initialization
    
    return init;
}
 
void Navigation::Start()
{
    m_logger.LogVerbose() << "Navigation::Start";
    
    m_PPortNavigation->Start();
    m_RPortInference->Start();
}
 
void Navigation::Terminate()
{
    m_logger.LogVerbose() << "Navigation::Terminate";
    
    // stop running
    m_running = false;
    
    m_PPortNavigation->Terminate();
    m_RPortInference->Terminate();
}
 
void Navigation::Run()
{
    m_logger.LogVerbose() << "Navigation::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_PPortNavigation->SendEventNavEventCyclic(); });
    m_workers.Async([this] { m_RPortInference->ReceiveEventInfEventCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace navigation
