///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportnavigation.h
/// SOFTWARE COMPONENT NAME           : RPortNavigation
/// GENERATED DATE                    : 2024-11-22 14:30:35
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SERVO_AA_RPORTNAVIGATION_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SERVO_AA_RPORTNAVIGATION_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "deepracer/service/navigation/svnavigation_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace servo
{
namespace aa
{
namespace port
{
 
class RPortNavigation
{
public:
    /// @brief Constructor
    RPortNavigation();
    
    /// @brief Destructor
    ~RPortNavigation();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, NavEvent
    void SubscribeNavEvent();
     
    /// @brief Stop event subscription, NavEvent
    void StopSubscribeNavEvent();
     
    /// @brief Event receive handler, NavEvent
    void ReceiveEventNavEventTriggered();
     
    /// @brief Event receive handler, NavEvent
    void ReceiveEventNavEventCyclic();
     
    /// @brief Read event data, NavEvent
    void ReadDataNavEvent(ara::com::SamplePtr<deepracer::service::navigation::proxy::events::NavEvent::SampleType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistEventHandlerNavEvent(std::function<void(const deepracer::service::navigation::proxy::events::NavEvent::SampleType&)> handler);

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<deepracer::service::navigation::proxy::SvNavigationProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, NavEvent
    void RegistReceiverNavEvent();

private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<deepracer::service::navigation::proxy::SvNavigationProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    /// @brief Callback from software component, NavEvent
    std::function<void(const deepracer::service::navigation::proxy::events::NavEvent::SampleType&)> m_receiverNavEvent;

};
 
} /// namespace port
} /// namespace aa
} /// namespace servo
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_SERVO_AA_RPORTNAVIGATION_H