///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : main.cpp
/// EXECUTABLE NAME                   : Camera
/// GENERATED DATE                    : 2024-12-03 10:27:56
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ara/core/initialization.h"
#include "ara/exec/execution_client.h"
#include "ara/log/logger.h"
 
#include "camera/aa/camera.h"
 
#include <csignal>
 
camera::aa::Camera* g_swcCamera{nullptr};
 
static void SignalHandler(std::int32_t signal)
{
    if (signal == SIGTERM || signal == SIGINT)
    {
        g_swcCamera->Terminate();
    }
}
 
int main(int argc, char *argv[], char* envp[])
{
    bool proceed{true};
    bool araInitialized{true};

    // Initialize ROS before AUTOSAR components
    ros::init(argc, argv, "sensor_data_camera");
    
    // initialize AUTOSAR adaptive application
    auto appInit = ara::core::Initialize();
    if (!appInit.HasValue())
    {
        proceed = false;
        araInitialized = false;
    }

    if (araInitialized)
    {
        ara::log::Logger& appLogger{ara::log::CreateLogger("CAM", "Camera's main function")};

        // regist signals
        std::signal(SIGTERM, SignalHandler);
        std::signal(SIGINT, SignalHandler);

        // declaration of software components
        camera::aa::Camera swcCamera;
        g_swcCamera = &swcCamera;

        // initialize software component
        proceed = swcCamera.Initialize();

        if (proceed)
        {
            // report execution state
            ara::exec::ExecutionClient executionClient;
            auto exec = executionClient.ReportExecutionState(ara::exec::ExecutionState::kRunning);
            if (exec.HasValue())
            {
                appLogger.LogVerbose() << "Running adaptive application";
            }
            else
            {
                appLogger.LogError() << "Unable to report execution state";
                araInitialized = false;
            }

            std::string modeStr = (argc > 1) ? argv[1] : "valid";
            camera::aa::VehicleMode mode;

            if (modeStr == "deepracer") {
                mode = camera::aa::VehicleMode::isDeepRacer;
            } else if (modeStr == "simulation") {
                mode = camera::aa::VehicleMode::isSimulation;
            } else {
                mode = camera::aa::VehicleMode::isInvalid;
                appLogger.LogWarn() << "Invalid mode, defaulting to 'isInvalid'";
            }

            // start software component
            swcCamera.Start(mode);
        }
        else
        {
            appLogger.LogError() << "Unable to start application";
        }

        // de-initialize AUTOSAR adaptive application
        auto appDeinit = ara::core::Deinitialize();
        if (!appDeinit.HasValue())
        {
            araInitialized = false;
        }
    }

    return (araInitialized && proceed) ? EXIT_SUCCESS : EXIT_FAILURE;
}

