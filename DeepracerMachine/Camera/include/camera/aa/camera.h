///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : camera.h
/// SOFTWARE COMPONENT NAME           : Camera
/// GENERATED DATE                    : 2024-12-03 10:27:56
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_CAMERA_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_CAMERA_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "camera/aa/port/pportcamera.h"
 
#include "para/swc/port_pool.h"
#include <vector>
#include <cstdint>
#include <chrono>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <chrono>
#include <thread>
#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/Image.h>
#include <cv_bridge/cv_bridge.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>
 
namespace camera
{
namespace aa
{
 
enum class VehicleMode : uint16_t {
    isDeepRacer = 0,
    isSimulation = 1,
    isInvalid = 2
};

inline uint16_t toUint16(VehicleMode mode) {
    return static_cast<uint16_t>(mode);
}

class Camera
{
public:
    /// @brief Constructor
    Camera();
    
    /// @brief Destructor
    ~Camera();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start(VehicleMode mode);
    
    /// @brief Terminate software component
    void Terminate();

    bool HandleCamera();

    bool HandleSimulationData();

    bool HandleDeepracerData();

    void initUDP();

    void cameraCallback(const sensor_msgs::Image::ConstPtr& msg, bool is_left);

private:
    /// @brief Run software component
    void Run();
 
private:
    bool m_running;
    
    /// @brief Pool of port
    para::swc::PortPool m_workers;
    
    /// @brief Logger for software component
    ara::log::Logger& m_logger;
    
    /// @brief Instance of Port {Camera.PPortCamera}
    std::shared_ptr<camera::aa::port::PPortCamera> m_PPortCamera;

    ros::NodeHandle nh;
    ros::Subscriber camera_sub_l;
    ros::Subscriber camera_sub_r;
    cv_bridge::CvImageConstPtr left_image_buffer;
    cv_bridge::CvImageConstPtr right_image_buffer;
    struct sockaddr_in server_addr_;
    VehicleMode m_vehicleMode;
};
 
} /// namespace aa
} /// namespace camera
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_CAMERA_AA_H