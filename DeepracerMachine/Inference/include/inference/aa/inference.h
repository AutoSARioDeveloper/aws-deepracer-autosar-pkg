///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : inference.h
/// SOFTWARE COMPONENT NAME           : Inference
/// GENERATED DATE                    : 2024-12-03 10:27:56
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_INFERENCE_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_INFERENCE_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "inference/aa/port/pportinference.h"
#include "inference/aa/port/rportsensorfusion.h"
 
#include "para/swc/port_pool.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <opencv2/opencv.hpp>
#include <inference_engine.hpp>

namespace inference
{
namespace aa
{
 
class Inference
{
public:
    /// @brief Constructor
    Inference();
    
    /// @brief Destructor
    ~Inference();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start();
    
    /// @brief Terminate software component
    void Terminate();
 
private:
    /// @brief Run software component
    void Run();

    void TaskReceiveSFEventCyclic();

    void OnReceiveSFEvent(const deepracer::service::sensorfusion::proxy::events::SFEvent::SampleType& sample);

    void HandleInferData();

    bool IsValidSensorFusion(const std::shared_ptr<deepracer::serviceinterfacefusion::SensorFusion>& data);
 
private:
    bool m_running;
    
    /// @brief Pool of port
    para::swc::PortPool m_workers;
    
    /// @brief Logger for software component
    ara::log::Logger& m_logger;

    std::mutex m_mutex;
    
    /// @brief Instance of Port {Inference.PPortInference}
    std::shared_ptr<inference::aa::port::PPortInference> m_PPortInference;
    
    /// @brief Instance of Port {Inference.RPortSensorFusion}
    std::shared_ptr<inference::aa::port::RPortSensorFusion> m_RPortSensorFusion;

    std::shared_ptr<deepracer::serviceinterfacefusion::SensorFusion> m_latestSFData;
};
 
} /// namespace aa
} /// namespace inference
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_INFERENCE_AA_H