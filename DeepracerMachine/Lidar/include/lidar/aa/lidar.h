///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : lidar.h
/// SOFTWARE COMPONENT NAME           : Lidar
/// GENERATED DATE                    : 2024-12-03 10:27:57
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_LIDAR_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_LIDAR_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "lidar/aa/port/pportlidar.h"
 
#include "para/swc/port_pool.h"
#include <iostream>
#include <vector>
#include <cstdint>
#include <mutex>
#include <cmath>
#include <algorithm>
#include <chrono>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#include <fstream>
#include <iomanip>
#include "sl_lidar.h" 
#include "sl_lidar_driver.h"
#include <sensor_msgs/LaserScan.h>
#include <ros/ros.h>

namespace lidar
{
namespace aa
{

struct LidarStruct {
    float angle;
    float distance;
    uint8_t quality;
};

enum class VehicleMode : uint16_t {
    isDeepRacer = 0,
    isSimulation = 1,
    isInvalid = 2
};

inline uint16_t toUint16(VehicleMode mode) {
    return static_cast<uint16_t>(mode);
}

class Lidar
{
public:
    /// @brief Constructor
    Lidar();
    
    /// @brief Destructor
    ~Lidar();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start(VehicleMode mode);
    
    /// @brief Terminate software component
    void Terminate();

    bool HandleLidar();

    bool HandleSimulationData();

    bool HandleDeepracerData();

    void lidarCallback(const sensor_msgs::LaserScan::ConstPtr& msg);

    void saveLidarData(std::vector<LidarStruct>& data, sl_lidar_response_measurement_node_hq_t* nodes, size_t count);

    Lidar(float scanIncrementDegree, float minDegree, float maxDegree, float minRange, float maxRange, float sampleNum);
    std::vector<float> generateLidarData(const std::vector<float>& distanceList);
    std::vector<float> generateSectorLidarData(const std::vector<float>& lidarInput, int sectorNum);
private:
    /// @brief Run software component
    void Run();
        
    std::vector<float> linspace(float start, float end, float num);
    std::vector<float> interp(const std::vector<float>& sortedX, const std::vector<float>& sortedXp, const std::vector<float>& sortedFp);
    std::vector<float> binarySectorizeLidarData(const std::vector<float>& lidarData, size_t blockSize);
 
private:
    bool m_running;

    /// @brief Pool of port
    para::swc::PortPool m_workers;
    
    /// @brief Logger for software component
    ara::log::Logger& m_logger;
    
    /// @brief Instance of Port {Lidar.PPortLidar}
    std::shared_ptr<lidar::aa::port::PPortLidar> m_PPortLidar;

    ros::NodeHandle nh;
    ros::Subscriber lidar_sub;
    float scanIncrementDegree_;
    float minDegree_;
    float maxDegree_;
    float minRange_;
    float maxRange_;
    float sampleNum_;
    int sectorNum_;
    std::mutex lidarMutex_;
    VehicleMode m_vehicleMode;
};
 
} /// namespace aa
} /// namespace lidar
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_LIDAR_AA_H