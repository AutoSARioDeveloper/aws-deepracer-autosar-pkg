///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : navigation.h
/// SOFTWARE COMPONENT NAME           : Navigation
/// GENERATED DATE                    : 2024-12-03 10:27:57
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_NAVIGATION_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_NAVIGATION_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "navigation/aa/port/pportnavigation.h"
#include "navigation/aa/port/rportinference.h"
 
#include "para/swc/port_pool.h"
#include <mutex>

namespace navigation
{
namespace aa
{
 
class Navigation
{
public:
    /// @brief Constructor
    Navigation();
    
    /// @brief Destructor
    ~Navigation();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start();
    
    /// @brief Terminate software component
    void Terminate();
 
private:
    /// @brief Run software component
    void Run();

    void TaskReceiveInfEventCyclic();

    void OnReceiveInfEvent(const deepracer::service::inference::proxy::events::InfEvent::SampleType& sample);

    void HandleNaviData();
    
    float scale_continuous_value(float action, float min_old, float max_old, float min_new, float max_new);

    float clamp(float value, float low, float high);
private:
    bool m_running;

    /// @brief Pool of port
    para::swc::PortPool m_workers;
    
    /// @brief Logger for software component
    ara::log::Logger& m_logger;
    
    std::mutex m_mutex;
    
    /// @brief Instance of Port {Navigation.PPortNavigation}
    std::shared_ptr<navigation::aa::port::PPortNavigation> m_PPortNavigation;
    
    /// @brief Instance of Port {Navigation.RPortInference}
    std::shared_ptr<navigation::aa::port::RPortInference> m_RPortInference;

    std::shared_ptr<deepracer::serviceinterfaceinfer::Inference> m_latestInfData;
};
 
} /// namespace aa
} /// namespace navigation
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_NAVIGATION_AA_H