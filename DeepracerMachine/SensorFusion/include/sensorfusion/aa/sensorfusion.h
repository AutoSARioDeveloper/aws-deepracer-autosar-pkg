///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : sensorfusion.h
/// SOFTWARE COMPONENT NAME           : SensorFusion
/// GENERATED DATE                    : 2024-12-03 10:27:58
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_SENSORFUSION_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_SENSORFUSION_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sensorfusion/aa/port/pportsensorfusion.h"
#include "sensorfusion/aa/port/rportcamera.h"
#include "sensorfusion/aa/port/rportlidar.h"
 
#include "para/swc/port_pool.h"
#include <deque>
#include <mutex>

namespace sensorfusion
{
namespace aa
{
 
class SensorFusion
{
public:
    /// @brief Constructor
    SensorFusion();
    
    /// @brief Destructor
    ~SensorFusion();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start();
    
    /// @brief Terminate software component
    void Terminate();
 
private:
    /// @brief Run software component
    void Run();

    void TaskReceiveCamEventCyclic();

    void OnReceiveCamEvent(const deepracer::service::camera::proxy::events::CamEvent::SampleType& sample);

    void TaskReceiveLidarEventCyclic();

    void OnReceiveLidarEvent(const deepracer::service::lidar::proxy::events::LidEvent::SampleType& sample);

    void HandleSensorData();
private:
    bool m_running;
    
    std::mutex lidarMutex;

    /// @brief Pool of port
    para::swc::PortPool m_workers;
    
    /// @brief Logger for software component
    ara::log::Logger& m_logger;
    
    /// @brief Instance of Port {SensorFusion.PPortSensorFusion}
    std::shared_ptr<sensorfusion::aa::port::PPortSensorFusion> m_PPortSensorFusion;
    
    /// @brief Instance of Port {SensorFusion.RPortCamera}
    std::shared_ptr<sensorfusion::aa::port::RPortCamera> m_RPortCamera;
    
    /// @brief Instance of Port {SensorFusion.RPortLidar}
    std::shared_ptr<sensorfusion::aa::port::RPortLidar> m_RPortLidar;

    std::shared_ptr<deepracer::serviceinterfacecam::StereoCamera> m_latestCameraData;
    std::deque<std::shared_ptr<deepracer::serviceinterfacelidar::SectorLidar>> lidarBuffer;
    std::shared_ptr<deepracer::serviceinterfacelidar::SectorLidar> FindClosestLidarData(uint64_t cameraTimestamp);

    // ara::core::Result<deepracer::serviceinterfacelidar::SectorLidar> FindClosestLidarData(uint64_t cameraTimestamp);
};
 
} /// namespace aa
} /// namespace sensorfusion
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_SENSORFUSION_AA_H